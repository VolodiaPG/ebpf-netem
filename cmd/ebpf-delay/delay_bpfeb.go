// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type delayHandleBpsDelay struct {
	TcHandle        uint32
	ThrottleRateBps uint32
	DelayMs         uint32
}

// loadDelay returns the embedded CollectionSpec for delay.
func loadDelay() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DelayBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load delay: %w", err)
	}

	return spec, err
}

// loadDelayObjects loads delay and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*delayObjects
//	*delayPrograms
//	*delayMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDelayObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDelay()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// delaySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type delaySpecs struct {
	delayProgramSpecs
	delayMapSpecs
}

// delaySpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type delayProgramSpecs struct {
	TcMain *ebpf.ProgramSpec `ebpf:"tc_main"`
}

// delayMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type delayMapSpecs struct {
	IP_HANDLE_BPS_DELAY *ebpf.MapSpec `ebpf:"IP_HANDLE_BPS_DELAY"`
}

// delayObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDelayObjects or ebpf.CollectionSpec.LoadAndAssign.
type delayObjects struct {
	delayPrograms
	delayMaps
}

func (o *delayObjects) Close() error {
	return _DelayClose(
		&o.delayPrograms,
		&o.delayMaps,
	)
}

// delayMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDelayObjects or ebpf.CollectionSpec.LoadAndAssign.
type delayMaps struct {
	IP_HANDLE_BPS_DELAY *ebpf.Map `ebpf:"IP_HANDLE_BPS_DELAY"`
}

func (m *delayMaps) Close() error {
	return _DelayClose(
		m.IP_HANDLE_BPS_DELAY,
	)
}

// delayPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDelayObjects or ebpf.CollectionSpec.LoadAndAssign.
type delayPrograms struct {
	TcMain *ebpf.Program `ebpf:"tc_main"`
}

func (p *delayPrograms) Close() error {
	return _DelayClose(
		p.TcMain,
	)
}

func _DelayClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed delay_bpfeb.o
var _DelayBytes []byte
